rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Posts collection rules  
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.createdBy);
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.createdBy);
    }

    // Event responses collection rules
    match /eventResponses/{responseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Comments collection rules
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Polls collection rules
    match /polls/{pollId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.createdBy);
    }

    // Poll votes collection rules
    match /pollVotes/{voteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Adoption posts collection rules (using 'adoptions' collection name)
    match /adoptions/{adoptionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.createdBy) || 
        isOwner(resource.data.userId) ||
        request.auth.uid == resource.data.createdBy ||
        request.auth.uid == resource.data.userId
      );
    }

    // Legacy adoption posts collection rules (keeping for compatibility)
    match /adoptionPosts/{adoptionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.createdBy) || 
        isOwner(resource.data.userId) ||
        request.auth.uid == resource.data.createdBy ||
        request.auth.uid == resource.data.userId
      );
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // FCM Notifications collection rules (for cloud functions)
    match /fcmNotifications/{notificationId} {
      allow create: if isAuthenticated();
      allow read, update: if false; // Only cloud functions should read/update
    }
  }
}
